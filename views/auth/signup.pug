extends ../layouts/layout

block content
  .container.mt-4
    h2 Sign Up
    form#signup-form(method="POST", action="/auth/signup", novalidate)
      input(type="hidden", name="_csrf", value=csrfToken)
      
      .mb-3
        label(for="email") Email:
        input.form-control(type="email", name="email", id="email", required, title="Enter a valid email address.", value=(oldInput && oldInput.email) || '')
      .mb-3
        label(for="username") Username:
        input.form-control(type="text", name="username", id="username", required, minlength="3", maxlength="30", pattern="^[a-zA-Z0-9_]+$", title="Username must be 3-30 characters and contain only letters, numbers, and underscores.", value=(oldInput && oldInput.username) || '')
      .mb-3
        label(for="password") Password:
        input.form-control(type="password", name="password", id="password", required, minlength="8", title="Password must be at least 8 characters long.")
      p#password-strength-text Password Strength:
      div#password-strength-bar(style="width: 100%; height: 10px; background: #ccc;")
        div#password-strength-fill(style="width: 0%; height: 100%; background: red;")
      .mb-3
        label(for="confirm-password") Confirm Password:
        input.form-control(type="password", name="confirm-password", id="confirm-password", required, title="Passwords must match.")
      button.btn.btn-primary(type="submit") Sign Up

    script(src="https://cdnjs.cloudflare.com/ajax/libs/zxcvbn/4.4.2/zxcvbn.js" defer)
    script.
      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("signup-form");
        const emailInput = document.getElementById("email");
        const usernameInput = document.getElementById("username");
        const passwordInput = document.getElementById("password");
        const confirmPasswordInput = document.getElementById("confirm-password");
        const strengthBar = document.getElementById("password-strength-fill");
        const strengthText = document.getElementById("password-strength-text");

        emailInput.addEventListener("input", function () {
          if (emailInput.validity.typeMismatch) {
            emailInput.setCustomValidity("Please enter a valid email address.");
          } else {
            emailInput.setCustomValidity("");
          }
        });

        usernameInput.addEventListener("input", function () {
          if (usernameInput.validity.patternMismatch) {
            usernameInput.setCustomValidity("Username must be 3-30 characters and contain only letters, numbers, and underscores.");
          } else if (usernameInput.validity.tooShort || usernameInput.validity.tooLong) {
            usernameInput.setCustomValidity("Username must be between 3 and 30 characters.");
          } else {
            usernameInput.setCustomValidity("");
          }
        });

        passwordInput.addEventListener("input", function () {
          const password = passwordInput.value;
          const strength = zxcvbn(password).score;
          const colors = ["red", "orange", "yellow", "blue", "green"];
          strengthBar.style.width = `${(strength + 1) * 20}%`;
          strengthBar.style.background = colors[strength];
          const strengthLabels = ["Very Weak", "Weak", "Fair", "Good", "Strong"];
          strengthText.textContent = `Password Strength: ${strengthLabels[strength]}`;
          if (strength < 2) {
            passwordInput.setCustomValidity("Password is too weak. Please choose a stronger one.");
          } else {
            passwordInput.setCustomValidity("");
          }
        });

        confirmPasswordInput.addEventListener("input", function () {
          if (confirmPasswordInput.value !== passwordInput.value) {
            confirmPasswordInput.setCustomValidity("Passwords do not match.");
          } else {
            confirmPasswordInput.setCustomValidity("");
          }
        });

        form.addEventListener("submit", function (event) {
          if (!emailInput.checkValidity()) {
            emailInput.reportValidity();
            event.preventDefault();
          } else if (!usernameInput.checkValidity()) {
            usernameInput.reportValidity();
            event.preventDefault();
          } else if (!passwordInput.checkValidity()) {
            passwordInput.reportValidity();
            event.preventDefault();
          } else if (!confirmPasswordInput.checkValidity()) {
            confirmPasswordInput.reportValidity();
            event.preventDefault();
          }
        });
      });
